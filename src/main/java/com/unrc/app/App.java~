package com.unrc.app;

import com.unrc.app.models.*;
import java.util.*;
import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.action.search.SearchType;
import org.elasticsearch.client.Client;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.node.Node;
import static org.elasticsearch.node.NodeBuilder.nodeBuilder;
import org.elasticsearch.search.SearchHit;
import org.javalite.activejdbc.Base;
import spark.ModelAndView;
import static spark.Spark.*;
import spark.Session;
/**
 * Hello world!
 *
 */


public class App {
    public static final Node node = org.elasticsearch.node
                                        .NodeBuilder
                                        .nodeBuilder()
                                        .clusterName("carsapp")
                                        .local(true)
                                        .node();
    public static Client client(){
        return node.client();
    }
      
    public static void main( String[] args )
    {
        System.out.println( "Hello cruel World!" );
	externalStaticFileLocation("./Images");
   
	before((request, response) -> {                                 //OJO CON LA CONTRASEÑA
            Base.open("com.mysql.jdbc.Driver", "jdbc:mysql://localhost/carsapp_development", "root", "root");
        });     
   
      
		get ("/app", (request, response) -> {
			Map<String, Object> attributes = new HashMap<>();
			return new ModelAndView(attributes, "Main.moustache");

			 },
            new MustacheTemplateEngine()
        );
		
		get ("/InsertVehicle", (request, response) -> {
			Map<String, Object> attributes = new HashMap<>();
			return new ModelAndView(attributes, "InsertVehicle.moustache");

			 },
            new MustacheTemplateEngine()
        );
	get("/app/:id/darAdmin", (request, response) -> {
            Session session = request.session(false);
            String email = session.attribute("user_email");
            User u2 = User.findFirst("user_email=?",email);
            if (u2.getAdmin()){
                User u = User.findById(request.params("id"));
                u.set("admin",true);
                u.save();
                String retornar = "Has añadido un nuevo administrador ";
                retornar = retornar + "<a href="+"http://localhost:4567/ListUser"+"><h3 style="+"color:#DF3A01"+"> Volver </h3></a>";
                return retornar; 
            }
            else{
                String retornar = "No eres administrador ";
                retornar = retornar + "<a href="+"http://localhost:4567/ListUser"+"><h3 style="+"color:#DF3A01"+"> Volver </h3></a>";
                return retornar; 
            }
        });	


		get ("/List", (request, response) -> {
			Map<String, Object> attributes = new HashMap<>();
			return new ModelAndView(attributes, "List.moustache");

			 },
            new MustacheTemplateEngine()
        );



//------------------------------------------Listar----------------------------  
   // Listar Usuario
    get("/ListUser", (request, response) -> {
          Map<String, Object> attributes = new HashMap<>();
          //pasa a list todos los usuarios
          List<User> users = User.findAll();
          
          boolean admin = false;
          Session session = request.session(false);
          if (session != null){   
              String email = session.attribute("user_email");
              User u = User.findFirst("email=?",email);
              attributes.put("admin",u.getAdmin());
          }
          else{
              attributes.put("admin",admin);
          }
          //carga tamaño de usuarios
          attributes.put("users_count", users.size());
          //carga list en map
          attributes.put("users", users);
         
          
          return new ModelAndView(attributes, "ListUsers.moustache");
      },
      new MustacheTemplateEngine()
  );
    

    get("/app/:id", (request, response) -> {
        User user = User.findById(request.params("id"));
        String email2 = user.getEmail();
        Session session = request.session(false);
        String email = session.attribute("user_email");
        User u = User.findFirst("email=?",email);
        Map<String,Object> attributes = new HashMap<String,Object>();
        if ((session != null)) {
                if ((u.getAdmin()) || (session.attribute("user_email").equals(email2))) {
                   attributes.put("user",u); 
                }
                else{
                    response.redirect("/Login");
                }
        }
        else{
            response.redirect("/app");
        }
        return new ModelAndView(attributes,"UserId.moustache");
    },
            
        new MustacheTemplateEngine()
    );
     
         
       
    get("/app/:id/posts",(request,response)-> {
        User u = User.findById(request.params("id"));
        String email = u.getEmail();
        Session session = request.session(false);
        Map<String, Object> attributes = new HashMap<>();
        if ((session != null)) {
            if ((session.attribute("user_email").equals(email)) || (u.getAdmin())) {
                List <Post> posts = Post.where("user_id = ?", request.params("id"));
                attributes.put("UserPosts",posts);
                attributes.put("userId",u.id()); 
            }
            else{
                response.redirect("/app");
            }
        }
        else{
            response.redirect("/app");
        }
        return new ModelAndView(attributes, "UserPosts.moustache");
        } ,
       new MustacheTemplateEngine()
    );
            
            
    get("posts/:pId", (request, response) -> {
        Post p = Post.findById(request.params("pId"));
        User u = User.findById(p.getOwner());
        Vehicle v = Vehicle.findById(p.getVehicle());
        List<Car> listC = Car.where("vehicle_id = ?", v.getId());
        List<Truck> listT = Truck.where("vehicle_id = ?", v.getId());
        List<Motorcycle> listM = Motorcycle.where("vehicle_id = ?", v.getId());   
        
        Map<String,Object> attributes = new HashMap<String,Object>();
        
        attributes.put("userFirstName",u.getFirstName());
        attributes.put("userLastName",u.getLastName());
        attributes.put("price",p.getPrice());
        attributes.put("title",p.getTitle());
	attributes.put("description",p.getDescription());
        attributes.put("model",v.getModel());
        attributes.put("patent",v.getPatent());
        attributes.put("idp",p.getId());
        if (!(listM.isEmpty())){
            attributes.put("type_motor",listM.get(0).getTypeMotor()); 
        } 
        if (!(listC.isEmpty())) {
            attributes.put("version",listC.get(0).getVersion());
        } 
     
        if (!(listT.isEmpty())){
            attributes.put("brake_system",listT.get(0).getbrakeSystem());
        } 
        return new ModelAndView(attributes,"PostId.moustache");
        },
        new MustacheTemplateEngine()
    );
   
    get("app/:id/vehicles/:vId", (request, response) -> {
        Vehicle v = Vehicle.findById(request.params("vId"));
        User u = User.findById(request.params("id"));           
        
         Map<String,Object> attributes = new HashMap<String,Object>();
        attributes.put("userFirstName",u.getFirstName());
        attributes.put("userLastName",u.getLastName());
        attributes.put("id", u.id());        
        attributes.put("model",v.getModel());
        attributes.put("patent",v.getPatent());
	attributes.put("mark",v.getMark());
	attributes.put("color",v.getColor());
	attributes.put("km",v.getKm());
        

          
           
        return new ModelAndView(attributes,"VehicleId.moustache");
        },
        new MustacheTemplateEngine()
            );
    
                

// Listar Post
        get("/ListPost", (request, response) -> {
          Session session = request.session(false);
          boolean log = false; 
          if (session != null){  
              log = true;
          }
          Map<String, Object> attributes = new HashMap<>();
          List<Post> post = Post.findAll();
          
          attributes.put("post_count", post.size());
          attributes.put("post", post);
          attributes.put("log", log);
          
          return new ModelAndView(attributes, "ListPost.moustache");
      },
      new MustacheTemplateEngine()
  );
        

                
   get("/app/:id/posts/:idp", (request, response) -> {
        Post p = Post.findById(request.params("idp"));
        List<Point> points = Point.where("post_id=?",request.params("idp"));
        int cant = 0;
        int count = 0;
        for (Point p2 : points){
            cant = cant  + p2.getPoint();
            count ++;
        }
        if (count ==0) {
            count =1; }
        Vehicle v = Vehicle.findById(p.getVehicle());
        User u = User.findById(v.getOwner());
        
        List<Car> listC = Car.where("vehicle_id = ?", v.getId());
       
        List<Truck> listT = Truck.where("vehicle_id = ?", v.getId());
        List<Motorcycle> listM = Motorcycle.where("vehicle_id = ?", v.getId());   
        Map<String,Object> attributes = new HashMap<String,Object>();
        double mean = cant / count;
        attributes.put("mean",mean);
        attributes.put("id", u.id());
        attributes.put("userFirstName",u.getFirstName());
        attributes.put("userLastName",u.getLastName());
        attributes.put("price",p.getPrice());
        attributes.put("title",p.getTitle());
        attributes.put("model",v.getModel());
        attributes.put("patent",v.getPatent());
	attributes.put("mark",v.getMark());
	attributes.put("color",v.getColor());
	attributes.put("km",v.getKm());  
       
       
        
        if (!(listM.isEmpty())){
            attributes.put("type_motor",listM.get(0).getTypeMotor()); 
        } 
        if (!(listC.isEmpty())) {
            attributes.put("version",listC.get(0).getVersion());
    
        } 
     
        if (!(listT.isEmpty())){
            attributes.put("brake_system",listT.get(0).getbrakeSystem());
        } 
            
           
        return new ModelAndView(attributes,"PostId.moustache");
        },
        new MustacheTemplateEngine()
            
   );
 
  get("app/:id/posts/:idp/questions", (request, response) -> {
        List <Question> questions = Question.where("post_id = ?", request.params("idp"));
        Map<String, Object> attributes = new HashMap<>();
        attributes.put("QuestionPosts",questions);
        
        
        return new ModelAndView(attributes, "QuestionPosts.moustache");
        } ,
       new MustacheTemplateEngine()
   );

  
   get("app/:id/posts/:idP/questions/:idQ/answerInd", (request, response) -> {
       
        Question q = Question.findById(request.params("idQ")); 
        Answer a = new Answer();
        a = Answer.findFirst("question_id=?",q.getId());
        
        
        Map<String, Object> attributes = new HashMap<>();
        attributes.put("getText",a.getText());
        
        
        return new ModelAndView(attributes, "AnswerQuestions.moustache");
        } ,
       new MustacheTemplateEngine()
   );
 
  
   get("app/:id/delete", (request, response) -> {
            Session session = request.session(false);
            User u = User.findById(request.params("id"));
            String idSession = session.attribute("id");
            User u2 = User.findById(request.params("idSession"));
            if (u.id().compareTo(u2.id()) == 0 || u2.getAdmin()){
                u.deleteCascade();
                String retornar = "Has sido eliminado";
                return retornar +"<a href="+"http://localhost:4567/app"+"><h3 style="+"color:#0000FF"+"> Volver </h3></a>";
            }else{
                String retornar = "Error no tienes permisos para esta operacion";
                return retornar +"<a href="+"http://localhost:4567/app"+"><h3 style="+"color:#0000FF"+"> Volver </h3></a>";
            }

            
    });
  
   
   
    //listar Vehiculos
	get("/ListVehicles", (request, response) -> {
            
          Map<String, Object> attributes = new HashMap<>();
          List<Vehicle> vehicles = Vehicle.findAll();
          Session session = request.session(false);
            if (session!=null) {
                String email = session.attribute("user_email");
                User u = User.findFirst("email=?",email);
                attributes.put("admin",u.getAdmin());
                attributes.put("notGuest",true);
          }
          attributes.put("vehiRegiscles_count", vehicles.size());
          attributes.put("vehicles", vehicles);
          return new ModelAndView(attributes, "ListVehicles.moustache");
      },
      new MustacheTemplateEngine()
  );
        
     // todos los vehiculos del usario   
    get("/app/:id/vehicles", (request, response) -> {
        User u = User.findById(request.params("id"));
        List<Vehicle> v = Vehicle.where("user_id=?", u.id());
 
        Map<String,Object> attributes = new HashMap<String,Object>();
        attributes.put("id", u.id());
        attributes.put("userFirstName",u.getFirstName());
        attributes.put("userLastName",u.getLastName());
        attributes.put("vehicles", v); 
            
           
        return new ModelAndView(attributes,"UserVehicles.moustache");
        },
        new MustacheTemplateEngine()
            );
 
        
   get("/ListVehicles/:id/delete", (request, response) -> {
            Vehicle v = Vehicle.findById(request.params("id"));
            v.deleteCascade();
            return "<a href="+"http://localhost:4567/app"+"><h3 style="+"color:#0000FF"+"> Volver </h3></a>";
    });
        
  
    
  //--------------------------------------Insert---------------------------------- 
     
          get ("/RegisterUser", (req, res) -> {                          
          Map<String, Object> attributes = new HashMap<>();
          
          return new ModelAndView(attributes, "RegisterUser.moustache");
      },
      new MustacheTemplateEngine()
  );
        post("/User", (request, response) -> {
            String retornar;
			retornar=" <body>";
            User user = new User();
            //Cargar variable user con datos tomados por pantalla
            user.set("first_name", request.queryParams("first_name"));
            user.set("last_name", request.queryParams("last_name"));
            user.set("email",request.queryParams("email"));
            user.set("pass",request.queryParams("pass"));
            user.set("admin",false);
            
            Address city = new Address();
            //Carga variable city con datos tomados por pantalla
            city.set("country", request.queryParams("country"));
            city.set("state",request.queryParams("state"));
            city.set("name",request.queryParams("name"));
            city.saveIt();

            user.saveIt();
            city.add(user);
			retornar = retornar + "Usuario Cargado Correctamente";
			retornar = retornar + "<a href="+"http://localhost:4567/app"+"><h3 style="+"color:#DF3A01"+"> Volver </h3></a>";
            return retornar;
            
         });
        
        get("/Guest", (request, response) -> {
         
          return new ModelAndView(null, "Guest.moustache");
      },
      new MustacheTemplateEngine()
  );
          
   get("/Login", (request, response) -> {
         // Map<String, Object> attributes = new HashMap<>();
          Session session = request.session(false);
          return new ModelAndView(null, "Login.moustache");
      },
      new MustacheTemplateEngine()
  );
 
   
  
         post("/CheckLogin", (request, response) -> {
            String retornar;
			retornar=" <body>";           
	    User u = User.findFirst("email=?",request.queryParams("email"));         
	    String pass =request.queryParams("pass");
            
            if (u !=null ){
	    if (u.getPass().compareTo(pass) == 0) {
                Session session = request.session(true);
                session.attribute("user_email", u.getEmail());
                session.attribute("user_id", u.id());
                if (u.getAdmin()) {
                      response.redirect("/app/"+u.id());
                }
                else {
                    response.redirect("/app/"+u.getId());
                }
            }
            else{
                response.redirect("/Login");
            }
            
            }
            else {
                retornar = retornar + "Usuario no existente";
                retornar = retornar +"<a href="+"http://localhost:4567/Login"+"><h3 style="+"color:#DF3A01"+"> Volver </h3></a>";
            }         
	         
	 return retornar;
        });
         
      get("/Logout", (request, response) -> {
            Session session = request.session(false);
            if (session!=null) {
                session.invalidate();
            }
            response.redirect("/app");
            return null;
        });
         
        get ("/app/:id/newCar", (request, response) -> {         
          Map<String, Object> attributes = new HashMap<>();
          User u = User.findById(request.params("id"));
          
          attributes.put("u",u.id());
          return new ModelAndView(attributes, "NewCar.moustache");
      },
      new MustacheTemplateEngine()
  );        
        
        
        
        post("/app/:id/car", (request, response) -> {
            String retornar;
            retornar=" <body>";
            User user = new User();
            //Cargar variable user con datos tomados por pantalla
            User user2 = new User();
            user.set("id",request.params("id"));
            
            user2 = User.findFirst("id=?",user.get("id"));
            //controlar existencia de usuario en base de datos

            Vehicle vehicle = new Vehicle();
            //carga variable vehicle con datos tomados por pantalla
            vehicle.set("model",request.queryParams("model"));
            vehicle.set("patent",request.queryParams("patent"));
            vehicle.set("color",request.queryParams("color"));
            vehicle.set("km",request.queryParams("km"));
            vehicle.set("mark",request.queryParams("mark"));
            vehicle.set("year",request.queryParams("year"));
            vehicle.saveIt();
            user2.add(vehicle); 


            Car car = new Car();
            //carga variable car con datos tomados por pantalla
            car.set("doors",request.queryParams("doors"));
            car.set("version",request.queryParams("version"));
            car.set("transmission",request.queryParams("transmission"));
            car.set("direction",request.queryParams("direction"));

            car.saveIt();
            vehicle.add(car);
            retornar =retornar +"Carga Exitosa";
           
            retornar = retornar + "<a href="+"http://localhost:4567/app/"+user2.id()+"><h3 style="+"color:#DF3A01"+"> Volver </h3></a>";
            return retornar;
         });   
        
        get ("/app/:id/newMotorcycle", (request, response) -> {         
          Map<String, Object> attributes = new HashMap<>();
          User u = User.findById(request.params("id"));
          
          attributes.put("u",u.id());
          return new ModelAndView(attributes, "NewMotorcycle.moustache");
      },
      new MustacheTemplateEngine()
  );                  
        
        post("/app/:id/motorcycle", (request, response) -> {
            String retornar;
            retornar=" <body>";
            User user = new User();
            //Cargar variable user con datos tomados por pantalla
            User user2 = new User();
            user.set("id",request.params("id"));
            
            user2 = User.findFirst("id=?",user.get("id"));
            
            Vehicle vehicle = new Vehicle();
            //carga variable vehicle con datos tomados por pantalla
            vehicle.set("model",request.queryParams("model"));
            vehicle.set("patent",request.queryParams("patent"));
            vehicle.set("color",request.queryParams("color"));
            vehicle.set("km",request.queryParams("km"));
            vehicle.set("mark",request.queryParams("mark"));
            vehicle.set("year",request.queryParams("year"));
            vehicle.saveIt();
            user2.add(vehicle);    

            Motorcycle moto = new Motorcycle();
            //carga variable moto con datos tomados por pantalla
            moto.set("type",request.queryParams("type"));
            moto.set("type_motor",request.queryParams("type_motor"));
            moto.set("boot_system",request.queryParams("boot_system"));
            moto.set("displacement",request.queryParams("displacement"));

            moto.saveIt();
            vehicle.add(moto);

            retornar =retornar +"Carga Exitosa";
        retornar = retornar + "<a href="+"http://localhost:4567/app/"+user2.id()+"><h3 style="+"color:#DF3A01"+"> Volver </h3></a>";
        return retornar;
     });   
        
         
        get ("/app/:id/newTruck", (request, response) -> {         
          Map<String, Object> attributes = new HashMap<>();
          User u = User.findById(request.params("id"));
          
          attributes.put("u",u.id());
          return new ModelAndView(attributes, "NewTruck.moustache");
      },
      new MustacheTemplateEngine()
  ); 
        
        
        post("/app/:id/truck" , (request, response) -> {
            String retornar;
            retornar=" <body>";
            User user = new User();
            //Cargar variable user con datos tomados por pantalla
            User user2 = new User();
            user.set("id",request.params("id"));
            
            user2 = User.findFirst("id=?",user.get("id"));
            Vehicle vehicle = new Vehicle();
            //carga variable vehicle con datos tomados por pantalla
            vehicle.set("model",request.queryParams("model"));
            vehicle.set("patent",request.queryParams("patent"));
            vehicle.set("color",request.queryParams("color"));
            vehicle.set("km",request.queryParams("km"));
            vehicle.set("mark",request.queryParams("mark"));
            vehicle.set("year",request.queryParams("year"));
            vehicle.saveIt();
            user2.add(vehicle);    

            Truck camion = new Truck();
            //carga variable camion con datos tomados por pantalla
            camion.set("brake_system",request.queryParams("brake_system"));
            camion.set("direction",request.queryParams("direction"));
            camion.set("capacity",request.queryParams("capacity"));                    
            camion.saveIt();
            vehicle.add(camion);


            retornar =retornar +"Carga Exitosa";
            retornar = retornar + "<a href="+"http://localhost:4567/app/"+user2.id()+"><h3 style="+"color:#DF3A01"+"> Volver </h3></a>";
            return retornar;
         });   

    
        get("/app/:id/newPost" , (request, response)-> {
          User u = User.findById(request.params("id"));
          String email = u.getEmail();
          Session session = request.session(false);
          String emailSession = session.attribute("user_email");
          String idSession = session.attribute("id");
          User userSession = User.findById(idSession);
          Map<String, Object> attributes = new HashMap<>();
          if((email.compareTo(emailSession) == 0) || userSession.getAdmin() ){

              attributes.put("u",u.id());
          }else{
              response.redirect("/Login");
          }
          
          return new ModelAndView(attributes, "NewPost.moustache");
      },
      new MustacheTemplateEngine()
  ); 
      
        post("/app/:id/post", (request, response) -> {
            String retornar = "";
            User u = User.findById(request.params("id"));
            List<Vehicle> v = Vehicle.where("user_id = ?", request.params("id"));
            String patente = request.queryParams("patent");
            boolean checkpatent = false;
            for (Vehicle v2 : v){
                if ((v2.getPatent().compareTo(patente)) == 0){
                    checkpatent = true;
                }
            }
            if (checkpatent){
            Vehicle vehicle = Vehicle.findFirst("patent =?", patente);    
            
            
            Post post = new Post();
            post.set("title",request.queryParams("title"));
            post.set("description",request.queryParams("description"));
            post.set("price",request.queryParams("price"));
            post.saveIt();
            u.add(post);
            vehicle.add(post);
            retornar = retornar +"Se ha creado el post exitosamente";
            retornar = retornar + "<a href="+"http://localhost:4567/app/"+request.params("id")+"><h3 style="+"color:#DF3A01"+"> Volver </h3></a>";
            return retornar;
            }
            else {
            retornar =retornar +"No se ha creado el post, patente inexistente";
            retornar = retornar + "<a href="+"http://localhost:4567/app/"+request.params("id")+"><h3 style="+"color:#DF3A01"+"> Volver </h3></a>";    
            return retornar;
            }
         });
        
        
         get("/:idp/newQuestion", (request, response) -> {        
          Map<String, Object> attributes = new HashMap<>();
          
          attributes.put("idp",request.params("idp"));
          return new ModelAndView(attributes, "newQuestion.moustache");
      },
      new MustacheTemplateEngine()
  ); 
         
        post("/:idp/question", (request, response) -> {
            String retornar;
            retornar=" <body>";
            Session session = request.session(false);
            String email = session.attribute("user_email");
            User u = User.findFirst("email=?",email);
            Post p = Post.findById(request.params("idp"));
            //Cargar variable user con datos tomados por pantalla
       
            //controlar existencia de usuario y de post en base de datos
                Question question = new Question();
                question.set("textQ",request.queryParams("textQ"));
                question.saveIt();
                
                u.add(question);
                p.add(question);

                retornar =retornar +"Carga Exitosa";
                    
		retornar = retornar + "<a href="+"http://localhost:4567/ListPost"+"><h3 style="+"\"color:#DF3A01\""+"> Volver </h3></a>";
            
                return retornar; 
         });
                 
                                                                                    
        get ("app/:id/posts/:idp/questions/:idq", (request, response) -> {         
           Map<String, Object> attributes = new HashMap<>();
          
          attributes.put("idq",request.params("idq"));
          return new ModelAndView(attributes, "newAnswer.moustache");
      },
      new MustacheTemplateEngine()
  ); 
        
        post("questions/:idQ/answer", (request, response) -> {
            String retornar= "";
            Question q = Question.findById(request.params("idQ"));
            Session session = request.session(false);
            String email = session.attribute("user_email");
            User u = User.findFirst("email=?",email);
            Answer answer = new Answer();
            answer.set("textA",request.queryParams("textA"));
            answer.saveIt();
            q.add(answer);
            u.add(answer);
            retornar =retornar +"Ha respondido pregunta exitosamente";
            return retornar; 
         });
        
    /*----------------------------------------------BUSQUEDAS----------------------------------------------------*/    
        get ("/Search/User", (request, response) -> {         
            String a ="<html> <head> <title> Busqueda </title> </head> <body> <form action=\"/Search\" method=\"post\">";

		 // crea un enlace para volver a la pag principal.
	    a=a + "<table align="+"right"+"><td><a href="+"http://localhost:4567/app"+"><img src="+"http://localhost:4567/ButtonHome.png"+" width="+"45"+" height="+"45" +"/></a></td></table>";
             a= a + "<h1 style="+"color:#DF3A01"+"> Buscar Usuario </h1> <FORM >";          
            
            //Usuario
            //lectura 
            a=a+"<p>Nombre  </p><INPUT type=text SIZE=25 NAME=firstName>";
                      
            a= a + "<td align=right valign=top></td><td align=center>";
            //creacion de botones
            a = a + "<input type=reset value=Borrar_informacion><input type=submit value= Enviar></FORM></BODY></HTML>";
            return a; 	
        });
        
        post("/Search",(request, response) -> {
            Map<String, Object> attributes = new HashMap<>();
           
            Client client = node.client();
           
  
            SearchResponse response_elastic = client.prepareSearch("users")
                                        .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)
                                        .setQuery(QueryBuilders.matchQuery("name",request.queryParams("firstName")))
                                        .execute()
                                        .actionGet();

            SearchHit[] docs = response_elastic.getHits().getHits();

            node.close();

          
            Map<String,Object> map = new HashMap<String,Object>();
            List<Map<String,Object>> lista = new LinkedList<Map<String,Object>>();
            for (SearchHit sh : docs) {
                map = sh.getSource();
                lista.add(map);

            } 
            long cant = response_elastic.getHits().getTotalHits();
            
            attributes.put("list",lista);
            attributes.put("cantidad",cant);
            return new ModelAndView(attributes,"SearchUser.moustache");
        },
            new MustacheTemplateEngine()
       
     );
        
      get("posts/:idp/punctuate", (request, response) -> {
                     Map<String,Object> attribute = new HashMap<String,Object>();
                     attribute.put("idp",request.params("idp"));
       return new ModelAndView(attribute,"Point.moustache");
   },
    new MustacheTemplateEngine()
   );     
   
   post("posts/:idp/checkPunctuate", (request, respone) ->{
       
       Post p = Post.findById(request.params("idp"));
       Session session = request.session(false);
       String email = session.attribute("user_email");
       User u = User.findFirst("email =?", email);
       String retornar = "";
       Point point = new Point();
       point.set("point",request.queryParams("points"));
       u.add(point);
       p.add(point);
       point.saveIt();
       retornar = "Has puntuado correctamente";
       return retornar;
      } );
        
     get("/cerrar", (request, response) -> {
            node.close();
            return "servidor cerrado!";
        });    
        
        //cierra la base de datos
        after((request, response) -> {
            Base.close();    
        });   
    }   
}